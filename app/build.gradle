apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    google()
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.2'
    defaultConfig {
        applicationId "com.cobeisfresh.azil"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 30
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    flavorDimensions("default")

    productFlavors {

        develop {
            applicationIdSuffix = ".dev"
            dimension = "default"
        }

        qa {
            applicationIdSuffix = ".qa"
            dimension = "default"
            ext.betaDistributionGroupAliases = "cobe-qa"
        }

        staging {
            applicationIdSuffix = ".release"
            dimension = "default"
            ext.betaDistributionGroupAliases = "azil-release"
        }

        live {
            dimension = "default"
            ext.betaDistributionGroupAliases = "cobe-qa"
        }
    }

    signingConfigs {
        release {
            if (System.getenv("TRAVIS")) {
                storeFile rootProject.file('app/keystore/azil_osijek_keystore.jks')
                storePassword System.getenv("storePassword")
                keyAlias System.getenv("keyAlias")
                keyPassword System.getenv("keyPassword")
            } else {
                def keystorePropertiesFile = rootProject.file("keystore.properties")
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    kapt {
        generateStubs = true
    }
}

afterEvaluate {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: apiSecret)
            entry(key: "apiKey", value: apiKey)
        }
    }
}

ext {
    supportLibVersion = "27.0.2"
    retrofitVersion = "2.3.0"
    leakCanaryVersion = "1.5"
    playServicesVersion = "10.2.0"
    firebaseVersion = "11.8.0"
    reactiveX = "2.0.1"
    kotlin_version = '1.2.20'
    daggerVersion = "2.12"
}

dependencies {

    //Support libraries
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:customtabs:${supportLibVersion}"
    compile "com.android.support:support-annotations:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"

    //Networking
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile "com.squareup.okhttp3:logging-interceptor:3.9.0"

    //Dependency injection
    compile "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    //ReactiveX
    compile "io.reactivex.rxjava2:rxandroid:${reactiveX}"
    compile "io.reactivex.rxjava2:rxjava:${reactiveX}"

    //LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    //Crash reporting
    compile("com.crashlytics.sdk.android:crashlytics:2.6.5@aar") {
        transitive = true
    }

    //UI
    compile "com.github.bumptech.glide:glide:4.3.1"
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'me.relex:circleindicator:1.2.2@aar'
    compile 'com.github.thijsk:TouchImageView:v1.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    //Testing
    testCompile "junit:junit:4.12"
    testCompile("com.nhaarman:mockito-kotlin:1.5.0") {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestCompile("com.android.support.test:rules:0.5")
    androidTestCompile("com.android.support.test:runner:0.5")
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"
    androidTestCompile 'org.hamcrest:hamcrest-core:1.3'

    //Facebook
    compile 'com.facebook.android:facebook-android-sdk:4.28.0'

    //Firebase
    compile "com.google.firebase:firebase-core:${firebaseVersion}"

    //EventBus
    compile 'org.greenrobot:eventbus:3.0.0'

    //Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //Multidex
    compile 'com.android.support:multidex:1.0.2'
}

apply plugin: 'com.google.gms.google-services'
